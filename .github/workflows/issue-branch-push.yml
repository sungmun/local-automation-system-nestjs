name: Issue Branch Push

on:
  push:
    branches:
      - feature/*
      - bugfix/*

jobs:
  FindIssue:
    runs-on: ubuntu-latest
    outputs:
      workflowLabel: ${{ steps.workflowLabel.outputs.WORKFLOW_LABEL }}
    steps:
      - uses: actions/checkout@v4
      - name: find issue labels workflow
        id: workflowLabel
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER=$(echo ${GITHUB_REF#refs/heads/} | cut -d'#' -f2)
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "WORKFLOW_LABEL=$(gh issue view "$ISSUE_NUMBER" --json labels --jq '.labels|map(.name)|.[]|select(. == "workflow")')" >> $GITHUB_OUTPUT
  TestCoverage:
    runs-on: ubuntu-latest
    needs: FindIssue
    if: needs.FindIssue.outputs.workflowLabel == ''
    outputs:
      markdownReport: ${{ steps.coverage.outputs.markdownReport }}
      CoverageIsEmpty: ${{ steps.coverage_final.outputs.COVERAGE_IS_EMPTY }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: v22.7.0
          cache: 'yarn'
      - uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - run: yarn --silent test:cov --changedSince=origin/develop > coverage.txt
      - id: coverage_final
        run: |
          if [ "$(jq -r 'length' ./coverage/coverage-final.json)" -eq 0 ]; then
            echo "COVERAGE_IS_EMPTY=true" >> $GITHUB_OUTPUT
          else
            echo "COVERAGE_IS_EMPTY=false" >> $GITHUB_OUTPUT
          fi
      - name: Prepare coverage report in markdown
        uses: fingerprintjs/action-coverage-report-md@v2
        id: coverage
        with:
          textReportPath: './coverage.txt'
  IssueComment:
    runs-on: ubuntu-latest
    needs: TestCoverage
    if: needs.TestCoverage.outputs.CoverageIsEmpty != 'true'
    steps:
      - name: Add coverage report to the job summary
        run: |
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.TestCoverage.outputs.markdownReport }}" >> $GITHUB_STEP_SUMMARY
      - name: Create comment
        env:
          MARK_DOWN: ${{ needs.TestCoverage.outputs.markdownReport}}
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          gh issue comment "$(echo ${GITHUB_REF#refs/heads/} | cut -d'/' -f2)" --body "$MARK_DOWN"
