name: Release and hotfix docs push

on:
  push:
    branches:
      - release/*
      - hotfix/*

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  E_MAIL: action@github.com
  USER_NAME: GitHub Action

jobs:
  find-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: find version
        id: version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "VERSION=$(echo ${GITHUB_REF#refs/heads/}| cut -d'/' -f2)" >> $GITHUB_OUTPUT
  vaild-version:
    runs-on: ubuntu-latest
    needs: find-version
    if: needs.find-version.outputs.version != ''
    steps:
      - uses: actions/checkout@v4
      - name: check version
        run: |
          VERSION="${{ needs.find-version.outputs.version }}"
          PACKAGE_VERSION="v$(jq -r '.version' package.json)"
          if [ "$VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Version mismatch: $VERSION vs $PACKAGE_VERSION"
            exit 1
          fi
  make-coverage-report:
    runs-on: ubuntu-latest
    needs: [vaild-version]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: v22.7.0
          cache: 'yarn'
      - uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - run: yarn --silent test:cov --coverageReporters=text > coverage.txt
      - name: Prepare coverage report in markdown
        uses: fingerprintjs/action-coverage-report-md@v2
        id: coverage
        with:
          textReportPath: './coverage.txt'
      - name: Write coverage report to file
        uses: joutvhu/write-file@v1
        with:
          path: './docs/coverage.md'
          contents: ${{ steps.coverage.outputs.markdownReport }}
          write_mode: overwrite
      - name: Insert document files to template
        uses: ryohidaka/action-md-insert@v1
        with:
          template_path: './docs/readme-template.md'
          src_dir: './docs'
          dest_file: 'README.md'
      - name: Setup Git
        run: |
          git config --global user.email "${{ env.E_MAIL }}"
          git config --global user.name "${{ env.USER_NAME }}"
      - name: Commit docs commit and push
        run: |
          git add README.md
          git commit -m 'docs: update coverage report with latest test results'
          git push
  main-merge:
    runs-on: ubuntu-latest
    needs: [find-version, vaild-version, make-coverage-report]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 모든 브랜치를 가져오기 위해 필요
      - name: Setup Git
        run: |
          git config --global user.email "${{ env.E_MAIL }}"
          git config --global user.name "${{ env.USER_NAME }}"
      - name: Merge release/hotfix branch into main
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          git pull origin $BRANCH
          git checkout main
          git merge --no-ff $BRANCH -m "Merge release branch"
          git tag ${{ needs.find-version.outputs.version }}
          git push origin main --tags
          git branch -d $BRANCH
          git push origin :$BRANCH
      - name: Merge main into develop
        run: |
          git checkout develop
          git merge --no-ff main -m "Merge main into develop"
          git push origin develop
